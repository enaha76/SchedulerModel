# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AcademicWeek {
  active: Boolean!
  endDate: DateTime!
  exceptionalClosures(orderBy: [ExceptionalClosureOrderByInput!], skip: Float, take: Float, where: ExceptionalClosureWhereInput): [ExceptionalClosure!]!
  id: Float!
  locked: Boolean!
  name: String!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  startDate: DateTime!
  weeklyProfessorAvailability(orderBy: [WeeklyProfessorAvailabilityOrderByInput!], skip: Float, take: Float, where: WeeklyProfessorAvailabilityWhereInput): [WeeklyProfessorAvailability!]!
  weeklyTeachingLoads(orderBy: [WeeklyTeachingLoadOrderByInput!], skip: Float, take: Float, where: WeeklyTeachingLoadWhereInput): [WeeklyTeachingLoad!]!
}

input AcademicWeekCreateInput {
  active: Boolean!
  endDate: DateTime!
  exceptionalClosures: ExceptionalClosureCreateNestedManyWithoutAcademicWeeksInput
  locked: Boolean!
  name: String!
  schedule: ScheduleCreateNestedManyWithoutAcademicWeeksInput
  startDate: DateTime!
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityCreateNestedManyWithoutAcademicWeeksInput
  weeklyTeachingLoads: WeeklyTeachingLoadCreateNestedManyWithoutAcademicWeeksInput
}

input AcademicWeekOrderByInput {
  active: SortOrder
  endDate: SortOrder
  id: SortOrder
  locked: SortOrder
  name: SortOrder
  startDate: SortOrder
}

input AcademicWeekUpdateInput {
  active: Boolean
  endDate: DateTime
  exceptionalClosures: ExceptionalClosureUpdateManyWithoutAcademicWeeksInput
  locked: Boolean
  name: String
  schedule: ScheduleUpdateManyWithoutAcademicWeeksInput
  startDate: DateTime
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityUpdateManyWithoutAcademicWeeksInput
  weeklyTeachingLoads: WeeklyTeachingLoadUpdateManyWithoutAcademicWeeksInput
}

input AcademicWeekWhereInput {
  active: BooleanFilter
  endDate: DateTimeFilter
  exceptionalClosures: ExceptionalClosureListRelationFilter
  id: IntFilter
  locked: BooleanFilter
  name: StringFilter
  schedule: ScheduleListRelationFilter
  startDate: DateTimeFilter
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityListRelationFilter
  weeklyTeachingLoads: WeeklyTeachingLoadListRelationFilter
}

input AcademicWeekWhereUniqueInput {
  id: Float!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Course {
  code: String!
  id: Float!
  name: String!
  professorAssignments(orderBy: [ProfessorAssignmentOrderByInput!], skip: Float, take: Float, where: ProfessorAssignmentWhereInput): [ProfessorAssignment!]!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  semester: Float!
  specialization: String!
  weeklyTeachingLoads(orderBy: [WeeklyTeachingLoadOrderByInput!], skip: Float, take: Float, where: WeeklyTeachingLoadWhereInput): [WeeklyTeachingLoad!]!
}

input CourseCreateInput {
  code: String!
  name: String!
  professorAssignments: ProfessorAssignmentCreateNestedManyWithoutCoursesInput
  schedule: ScheduleCreateNestedManyWithoutCoursesInput
  semester: Float!
  specialization: String!
  weeklyTeachingLoads: WeeklyTeachingLoadCreateNestedManyWithoutCoursesInput
}

input CourseOrderByInput {
  code: SortOrder
  id: SortOrder
  name: SortOrder
  semester: SortOrder
  specialization: SortOrder
}

input CourseUpdateInput {
  code: String
  name: String
  professorAssignments: ProfessorAssignmentUpdateManyWithoutCoursesInput
  schedule: ScheduleUpdateManyWithoutCoursesInput
  semester: Float
  specialization: String
  weeklyTeachingLoads: WeeklyTeachingLoadUpdateManyWithoutCoursesInput
}

input CourseWhereInput {
  code: StringFilter
  id: IntFilter
  name: StringFilter
  professorAssignments: ProfessorAssignmentListRelationFilter
  schedule: ScheduleListRelationFilter
  semester: IntFilter
  specialization: StringFilter
  weeklyTeachingLoads: WeeklyTeachingLoadListRelationFilter
}

input CourseWhereUniqueInput {
  id: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

type ExceptionalClosure {
  id: Float!
  reason: String
  timeSlot: TimeSlot
  week: AcademicWeek
}

input ExceptionalClosureCreateInput {
  reason: String
  timeSlot: TimeSlotWhereUniqueInput!
  week: AcademicWeekWhereUniqueInput!
}

input ExceptionalClosureCreateNestedManyWithoutAcademicWeeksInput {
  connect: [ExceptionalClosureWhereUniqueInput!]
}

input ExceptionalClosureCreateNestedManyWithoutTimeSlotsInput {
  connect: [ExceptionalClosureWhereUniqueInput!]
}

input ExceptionalClosureListRelationFilter {
  every: ExceptionalClosureWhereInput
  none: ExceptionalClosureWhereInput
  some: ExceptionalClosureWhereInput
}

input ExceptionalClosureOrderByInput {
  id: SortOrder
  reason: SortOrder
  timeSlotId: SortOrder
  weekId: SortOrder
}

input ExceptionalClosureUpdateInput {
  reason: String
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input ExceptionalClosureUpdateManyWithoutAcademicWeeksInput {
  connect: [ExceptionalClosureWhereUniqueInput!]
  disconnect: [ExceptionalClosureWhereUniqueInput!]
  set: [ExceptionalClosureWhereUniqueInput!]
}

input ExceptionalClosureUpdateManyWithoutTimeSlotsInput {
  connect: [ExceptionalClosureWhereUniqueInput!]
  disconnect: [ExceptionalClosureWhereUniqueInput!]
  set: [ExceptionalClosureWhereUniqueInput!]
}

input ExceptionalClosureWhereInput {
  id: IntFilter
  reason: StringNullableFilter
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input ExceptionalClosureWhereUniqueInput {
  id: Float!
}

type Group {
  groupOverlaps1(orderBy: [GroupOverlapOrderByInput!], skip: Float, take: Float, where: GroupOverlapWhereInput): [GroupOverlap!]!
  groupOverlaps2(orderBy: [GroupOverlapOrderByInput!], skip: Float, take: Float, where: GroupOverlapWhereInput): [GroupOverlap!]!
  id: Float!
  name: String!
  professorAssignments(orderBy: [ProfessorAssignmentOrderByInput!], skip: Float, take: Float, where: ProfessorAssignmentWhereInput): [ProfessorAssignment!]!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  semester: Float!
  specialization: String!
  weeklyTeachingLoads(orderBy: [WeeklyTeachingLoadOrderByInput!], skip: Float, take: Float, where: WeeklyTeachingLoadWhereInput): [WeeklyTeachingLoad!]!
}

input GroupCreateInput {
  groupOverlaps1: GroupOverlapCreateNestedManyWithoutGroupsInput
  groupOverlaps2: GroupOverlapCreateNestedManyWithoutGroupsInput
  name: String!
  professorAssignments: ProfessorAssignmentCreateNestedManyWithoutGroupsInput
  schedule: ScheduleCreateNestedManyWithoutGroupsInput
  semester: Float!
  specialization: String!
  weeklyTeachingLoads: WeeklyTeachingLoadCreateNestedManyWithoutGroupsInput
}

input GroupOrderByInput {
  id: SortOrder
  name: SortOrder
  semester: SortOrder
  specialization: SortOrder
}

type GroupOverlap {
  canOverlap: Boolean!
  group1: Group
  group2: Group
  id: Float!
}

input GroupOverlapCreateInput {
  canOverlap: Boolean!
  group1: GroupWhereUniqueInput!
  group2: GroupWhereUniqueInput!
}

input GroupOverlapCreateNestedManyWithoutGroupsInput {
  connect: [GroupOverlapWhereUniqueInput!]
}

input GroupOverlapListRelationFilter {
  every: GroupOverlapWhereInput
  none: GroupOverlapWhereInput
  some: GroupOverlapWhereInput
}

input GroupOverlapOrderByInput {
  canOverlap: SortOrder
  group1Id: SortOrder
  group2Id: SortOrder
  id: SortOrder
}

input GroupOverlapUpdateInput {
  canOverlap: Boolean
  group1: GroupWhereUniqueInput
  group2: GroupWhereUniqueInput
}

input GroupOverlapUpdateManyWithoutGroupsInput {
  connect: [GroupOverlapWhereUniqueInput!]
  disconnect: [GroupOverlapWhereUniqueInput!]
  set: [GroupOverlapWhereUniqueInput!]
}

input GroupOverlapWhereInput {
  canOverlap: BooleanFilter
  group1: GroupWhereUniqueInput
  group2: GroupWhereUniqueInput
  id: IntFilter
}

input GroupOverlapWhereUniqueInput {
  id: Float!
}

input GroupUpdateInput {
  groupOverlaps1: GroupOverlapUpdateManyWithoutGroupsInput
  groupOverlaps2: GroupOverlapUpdateManyWithoutGroupsInput
  name: String
  professorAssignments: ProfessorAssignmentUpdateManyWithoutGroupsInput
  schedule: ScheduleUpdateManyWithoutGroupsInput
  semester: Float
  specialization: String
  weeklyTeachingLoads: WeeklyTeachingLoadUpdateManyWithoutGroupsInput
}

input GroupWhereInput {
  groupOverlaps1: GroupOverlapListRelationFilter
  groupOverlaps2: GroupOverlapListRelationFilter
  id: IntFilter
  name: StringFilter
  professorAssignments: ProfessorAssignmentListRelationFilter
  schedule: ScheduleListRelationFilter
  semester: IntFilter
  specialization: StringFilter
  weeklyTeachingLoads: WeeklyTeachingLoadListRelationFilter
}

input GroupWhereUniqueInput {
  id: Float!
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: Int
  notIn: [Int!]
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResponse {
  accessToken: String!
  user: UserType!
}

type Mutation {
  createAcademicWeek(data: AcademicWeekCreateInput!): AcademicWeek!
  createCourse(data: CourseCreateInput!): Course!
  createExceptionalClosure(data: ExceptionalClosureCreateInput!): ExceptionalClosure!
  createGroup(data: GroupCreateInput!): Group!
  createGroupOverlap(data: GroupOverlapCreateInput!): GroupOverlap!
  createProfessor(data: ProfessorCreateInput!): Professor!
  createProfessorAssignment(data: ProfessorAssignmentCreateInput!): ProfessorAssignment!
  createRoom(data: RoomCreateInput!): Room!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  createTimeSlot(data: TimeSlotCreateInput!): TimeSlot!
  createWeeklyProfessorAvailability(data: WeeklyProfessorAvailabilityCreateInput!): WeeklyProfessorAvailability!
  createWeeklyTeachingLoad(data: WeeklyTeachingLoadCreateInput!): WeeklyTeachingLoad!
  deleteAcademicWeek(where: AcademicWeekWhereUniqueInput!): AcademicWeek!
  deleteCourse(where: CourseWhereUniqueInput!): Course!
  deleteExceptionalClosure(where: ExceptionalClosureWhereUniqueInput!): ExceptionalClosure!
  deleteGroup(where: GroupWhereUniqueInput!): Group!
  deleteGroupOverlap(where: GroupOverlapWhereUniqueInput!): GroupOverlap!
  deleteProfessor(where: ProfessorWhereUniqueInput!): Professor!
  deleteProfessorAssignment(where: ProfessorAssignmentWhereUniqueInput!): ProfessorAssignment!
  deleteRoom(where: RoomWhereUniqueInput!): Room!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule!
  deleteTimeSlot(where: TimeSlotWhereUniqueInput!): TimeSlot!
  deleteWeeklyProfessorAvailability(where: WeeklyProfessorAvailabilityWhereUniqueInput!): WeeklyProfessorAvailability!
  deleteWeeklyTeachingLoad(where: WeeklyTeachingLoadWhereUniqueInput!): WeeklyTeachingLoad!
  login(credentials: LoginInput!): LoginResponse!
  updateAcademicWeek(data: AcademicWeekUpdateInput!, where: AcademicWeekWhereUniqueInput!): AcademicWeek!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course!
  updateExceptionalClosure(data: ExceptionalClosureUpdateInput!, where: ExceptionalClosureWhereUniqueInput!): ExceptionalClosure!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group!
  updateGroupOverlap(data: GroupOverlapUpdateInput!, where: GroupOverlapWhereUniqueInput!): GroupOverlap!
  updateProfessor(data: ProfessorUpdateInput!, where: ProfessorWhereUniqueInput!): Professor!
  updateProfessorAssignment(data: ProfessorAssignmentUpdateInput!, where: ProfessorAssignmentWhereUniqueInput!): ProfessorAssignment!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule!
  updateTimeSlot(data: TimeSlotUpdateInput!, where: TimeSlotWhereUniqueInput!): TimeSlot!
  updateWeeklyProfessorAvailability(data: WeeklyProfessorAvailabilityUpdateInput!, where: WeeklyProfessorAvailabilityWhereUniqueInput!): WeeklyProfessorAvailability!
  updateWeeklyTeachingLoad(data: WeeklyTeachingLoadUpdateInput!, where: WeeklyTeachingLoadWhereUniqueInput!): WeeklyTeachingLoad!
}

type Professor {
  department: String
  email: String
  id: Float!
  name: String!
  professorAssignments(orderBy: [ProfessorAssignmentOrderByInput!], skip: Float, take: Float, where: ProfessorAssignmentWhereInput): [ProfessorAssignment!]!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  weeklyProfessorAvailability(orderBy: [WeeklyProfessorAvailabilityOrderByInput!], skip: Float, take: Float, where: WeeklyProfessorAvailabilityWhereInput): [WeeklyProfessorAvailability!]!
}

type ProfessorAssignment {
  course: Course
  group: Group
  id: Float!
  professor: Professor
  teachingType: String!
}

input ProfessorAssignmentCreateInput {
  course: CourseWhereUniqueInput!
  group: GroupWhereUniqueInput!
  professor: ProfessorWhereUniqueInput!
  teachingType: String!
}

input ProfessorAssignmentCreateNestedManyWithoutCoursesInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentCreateNestedManyWithoutGroupsInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentCreateNestedManyWithoutProfessorsInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentListRelationFilter {
  every: ProfessorAssignmentWhereInput
  none: ProfessorAssignmentWhereInput
  some: ProfessorAssignmentWhereInput
}

input ProfessorAssignmentOrderByInput {
  courseId: SortOrder
  groupId: SortOrder
  id: SortOrder
  professorId: SortOrder
  teachingType: SortOrder
}

input ProfessorAssignmentUpdateInput {
  course: CourseWhereUniqueInput
  group: GroupWhereUniqueInput
  professor: ProfessorWhereUniqueInput
  teachingType: String
}

input ProfessorAssignmentUpdateManyWithoutCoursesInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
  disconnect: [ProfessorAssignmentWhereUniqueInput!]
  set: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentUpdateManyWithoutGroupsInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
  disconnect: [ProfessorAssignmentWhereUniqueInput!]
  set: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentUpdateManyWithoutProfessorsInput {
  connect: [ProfessorAssignmentWhereUniqueInput!]
  disconnect: [ProfessorAssignmentWhereUniqueInput!]
  set: [ProfessorAssignmentWhereUniqueInput!]
}

input ProfessorAssignmentWhereInput {
  course: CourseWhereUniqueInput
  group: GroupWhereUniqueInput
  id: IntFilter
  professor: ProfessorWhereUniqueInput
  teachingType: StringFilter
}

input ProfessorAssignmentWhereUniqueInput {
  id: Float!
}

input ProfessorCreateInput {
  department: String
  email: String
  name: String!
  professorAssignments: ProfessorAssignmentCreateNestedManyWithoutProfessorsInput
  schedule: ScheduleCreateNestedManyWithoutProfessorsInput
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityCreateNestedManyWithoutProfessorsInput
}

input ProfessorOrderByInput {
  department: SortOrder
  email: SortOrder
  id: SortOrder
  name: SortOrder
}

input ProfessorUpdateInput {
  department: String
  email: String
  name: String
  professorAssignments: ProfessorAssignmentUpdateManyWithoutProfessorsInput
  schedule: ScheduleUpdateManyWithoutProfessorsInput
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityUpdateManyWithoutProfessorsInput
}

input ProfessorWhereInput {
  department: StringNullableFilter
  email: StringNullableFilter
  id: IntFilter
  name: StringFilter
  professorAssignments: ProfessorAssignmentListRelationFilter
  schedule: ScheduleListRelationFilter
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityListRelationFilter
}

input ProfessorWhereUniqueInput {
  id: Float!
}

type Query {
  academicWeek(where: AcademicWeekWhereUniqueInput!): AcademicWeek
  academicWeeks(orderBy: [AcademicWeekOrderByInput!], skip: Float, take: Float, where: AcademicWeekWhereInput): [AcademicWeek!]!
  course(where: CourseWhereUniqueInput!): Course
  courses(orderBy: [CourseOrderByInput!], skip: Float, take: Float, where: CourseWhereInput): [Course!]!
  exceptionalClosure(where: ExceptionalClosureWhereUniqueInput!): ExceptionalClosure
  exceptionalClosures(orderBy: [ExceptionalClosureOrderByInput!], skip: Float, take: Float, where: ExceptionalClosureWhereInput): [ExceptionalClosure!]!
  group(where: GroupWhereUniqueInput!): Group
  groupOverlap(where: GroupOverlapWhereUniqueInput!): GroupOverlap
  groupOverlaps(orderBy: [GroupOverlapOrderByInput!], skip: Float, take: Float, where: GroupOverlapWhereInput): [GroupOverlap!]!
  groups(orderBy: [GroupOrderByInput!], skip: Float, take: Float, where: GroupWhereInput): [Group!]!
  me: UserType!
  professor(where: ProfessorWhereUniqueInput!): Professor
  professorAssignment(where: ProfessorAssignmentWhereUniqueInput!): ProfessorAssignment
  professorAssignments(orderBy: [ProfessorAssignmentOrderByInput!], skip: Float, take: Float, where: ProfessorAssignmentWhereInput): [ProfessorAssignment!]!
  professors(orderBy: [ProfessorOrderByInput!], skip: Float, take: Float, where: ProfessorWhereInput): [Professor!]!
  room(where: RoomWhereUniqueInput!): Room
  rooms(orderBy: [RoomOrderByInput!], skip: Float, take: Float, where: RoomWhereInput): [Room!]!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  timeSlot(where: TimeSlotWhereUniqueInput!): TimeSlot
  timeSlots(orderBy: [TimeSlotOrderByInput!], skip: Float, take: Float, where: TimeSlotWhereInput): [TimeSlot!]!
  weeklyProfessorAvailabilities(orderBy: [WeeklyProfessorAvailabilityOrderByInput!], skip: Float, take: Float, where: WeeklyProfessorAvailabilityWhereInput): [WeeklyProfessorAvailability!]!
  weeklyProfessorAvailability(where: WeeklyProfessorAvailabilityWhereUniqueInput!): WeeklyProfessorAvailability
  weeklyTeachingLoad(where: WeeklyTeachingLoadWhereUniqueInput!): WeeklyTeachingLoad
  weeklyTeachingLoads(orderBy: [WeeklyTeachingLoadOrderByInput!], skip: Float, take: Float, where: WeeklyTeachingLoadWhereInput): [WeeklyTeachingLoad!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Room {
  capacity: Float!
  id: Float!
  name: String!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  typeField: String!
}

input RoomCreateInput {
  capacity: Float!
  name: String!
  schedule: ScheduleCreateNestedManyWithoutRoomsInput
  typeField: String!
}

input RoomOrderByInput {
  capacity: SortOrder
  id: SortOrder
  name: SortOrder
  typeField: SortOrder
}

input RoomUpdateInput {
  capacity: Float
  name: String
  schedule: ScheduleUpdateManyWithoutRoomsInput
  typeField: String
}

input RoomWhereInput {
  capacity: IntFilter
  id: IntFilter
  name: StringFilter
  schedule: ScheduleListRelationFilter
  typeField: StringFilter
}

input RoomWhereUniqueInput {
  id: Float!
}

type Schedule {
  course: Course
  createdAt: DateTime!
  group: Group
  id: Float!
  professor: Professor
  room: Room
  teachingType: String!
  timeSlot: TimeSlot
  week: AcademicWeek
}

input ScheduleCreateInput {
  course: CourseWhereUniqueInput!
  group: GroupWhereUniqueInput!
  professor: ProfessorWhereUniqueInput!
  room: RoomWhereUniqueInput!
  teachingType: String!
  timeSlot: TimeSlotWhereUniqueInput!
  week: AcademicWeekWhereUniqueInput!
}

input ScheduleCreateNestedManyWithoutAcademicWeeksInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateNestedManyWithoutCoursesInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateNestedManyWithoutGroupsInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateNestedManyWithoutProfessorsInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateNestedManyWithoutRoomsInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleCreateNestedManyWithoutTimeSlotsInput {
  connect: [ScheduleWhereUniqueInput!]
}

input ScheduleListRelationFilter {
  every: ScheduleWhereInput
  none: ScheduleWhereInput
  some: ScheduleWhereInput
}

input ScheduleOrderByInput {
  courseId: SortOrder
  createdAt: SortOrder
  groupId: SortOrder
  id: SortOrder
  professorId: SortOrder
  roomId: SortOrder
  teachingType: SortOrder
  timeSlotId: SortOrder
  weekId: SortOrder
}

input ScheduleUpdateInput {
  course: CourseWhereUniqueInput
  group: GroupWhereUniqueInput
  professor: ProfessorWhereUniqueInput
  room: RoomWhereUniqueInput
  teachingType: String
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input ScheduleUpdateManyWithoutAcademicWeeksInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleUpdateManyWithoutCoursesInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleUpdateManyWithoutGroupsInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleUpdateManyWithoutProfessorsInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleUpdateManyWithoutRoomsInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleUpdateManyWithoutTimeSlotsInput {
  connect: [ScheduleWhereUniqueInput!]
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
}

input ScheduleWhereInput {
  course: CourseWhereUniqueInput
  createdAt: DateTimeFilter
  group: GroupWhereUniqueInput
  id: IntFilter
  professor: ProfessorWhereUniqueInput
  room: RoomWhereUniqueInput
  teachingType: StringFilter
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input ScheduleWhereUniqueInput {
  id: Float!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type TimeSlot {
  dayOfWeek: Float!
  endTime: DateTime!
  exceptionalClosures(orderBy: [ExceptionalClosureOrderByInput!], skip: Float, take: Float, where: ExceptionalClosureWhereInput): [ExceptionalClosure!]!
  id: Float!
  schedule(orderBy: [ScheduleOrderByInput!], skip: Float, take: Float, where: ScheduleWhereInput): [Schedule!]!
  slotIndex: Float!
  startTime: DateTime!
  weeklyProfessorAvailability(orderBy: [WeeklyProfessorAvailabilityOrderByInput!], skip: Float, take: Float, where: WeeklyProfessorAvailabilityWhereInput): [WeeklyProfessorAvailability!]!
}

input TimeSlotCreateInput {
  dayOfWeek: Float!
  endTime: DateTime!
  exceptionalClosures: ExceptionalClosureCreateNestedManyWithoutTimeSlotsInput
  schedule: ScheduleCreateNestedManyWithoutTimeSlotsInput
  slotIndex: Float!
  startTime: DateTime!
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityCreateNestedManyWithoutTimeSlotsInput
}

input TimeSlotOrderByInput {
  dayOfWeek: SortOrder
  endTime: SortOrder
  id: SortOrder
  slotIndex: SortOrder
  startTime: SortOrder
}

input TimeSlotUpdateInput {
  dayOfWeek: Float
  endTime: DateTime
  exceptionalClosures: ExceptionalClosureUpdateManyWithoutTimeSlotsInput
  schedule: ScheduleUpdateManyWithoutTimeSlotsInput
  slotIndex: Float
  startTime: DateTime
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityUpdateManyWithoutTimeSlotsInput
}

input TimeSlotWhereInput {
  dayOfWeek: IntFilter
  endTime: DateTimeFilter
  exceptionalClosures: ExceptionalClosureListRelationFilter
  id: IntFilter
  schedule: ScheduleListRelationFilter
  slotIndex: IntFilter
  startTime: DateTimeFilter
  weeklyProfessorAvailability: WeeklyProfessorAvailabilityListRelationFilter
}

input TimeSlotWhereUniqueInput {
  id: Float!
}

type UserType {
  roles: [String!]!
  username: String!
}

type WeeklyProfessorAvailability {
  id: Float!
  isAvailable: Boolean!
  professor: Professor
  timeSlot: TimeSlot
  week: AcademicWeek
}

input WeeklyProfessorAvailabilityCreateInput {
  isAvailable: Boolean!
  professor: ProfessorWhereUniqueInput!
  timeSlot: TimeSlotWhereUniqueInput!
  week: AcademicWeekWhereUniqueInput!
}

input WeeklyProfessorAvailabilityCreateNestedManyWithoutAcademicWeeksInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityCreateNestedManyWithoutProfessorsInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityCreateNestedManyWithoutTimeSlotsInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityListRelationFilter {
  every: WeeklyProfessorAvailabilityWhereInput
  none: WeeklyProfessorAvailabilityWhereInput
  some: WeeklyProfessorAvailabilityWhereInput
}

input WeeklyProfessorAvailabilityOrderByInput {
  id: SortOrder
  isAvailable: SortOrder
  professorId: SortOrder
  timeSlotId: SortOrder
  weekId: SortOrder
}

input WeeklyProfessorAvailabilityUpdateInput {
  isAvailable: Boolean
  professor: ProfessorWhereUniqueInput
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input WeeklyProfessorAvailabilityUpdateManyWithoutAcademicWeeksInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  disconnect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  set: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityUpdateManyWithoutProfessorsInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  disconnect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  set: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityUpdateManyWithoutTimeSlotsInput {
  connect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  disconnect: [WeeklyProfessorAvailabilityWhereUniqueInput!]
  set: [WeeklyProfessorAvailabilityWhereUniqueInput!]
}

input WeeklyProfessorAvailabilityWhereInput {
  id: IntFilter
  isAvailable: BooleanFilter
  professor: ProfessorWhereUniqueInput
  timeSlot: TimeSlotWhereUniqueInput
  week: AcademicWeekWhereUniqueInput
}

input WeeklyProfessorAvailabilityWhereUniqueInput {
  id: Float!
}

type WeeklyTeachingLoad {
  course: Course
  group: Group
  hoursRequired: Float!
  id: Float!
  teachingType: String!
  week: AcademicWeek
}

input WeeklyTeachingLoadCreateInput {
  course: CourseWhereUniqueInput!
  group: GroupWhereUniqueInput!
  hoursRequired: Float!
  teachingType: String!
  week: AcademicWeekWhereUniqueInput!
}

input WeeklyTeachingLoadCreateNestedManyWithoutAcademicWeeksInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadCreateNestedManyWithoutCoursesInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadCreateNestedManyWithoutGroupsInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadListRelationFilter {
  every: WeeklyTeachingLoadWhereInput
  none: WeeklyTeachingLoadWhereInput
  some: WeeklyTeachingLoadWhereInput
}

input WeeklyTeachingLoadOrderByInput {
  courseId: SortOrder
  groupId: SortOrder
  hoursRequired: SortOrder
  id: SortOrder
  teachingType: SortOrder
  weekId: SortOrder
}

input WeeklyTeachingLoadUpdateInput {
  course: CourseWhereUniqueInput
  group: GroupWhereUniqueInput
  hoursRequired: Float
  teachingType: String
  week: AcademicWeekWhereUniqueInput
}

input WeeklyTeachingLoadUpdateManyWithoutAcademicWeeksInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
  disconnect: [WeeklyTeachingLoadWhereUniqueInput!]
  set: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadUpdateManyWithoutCoursesInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
  disconnect: [WeeklyTeachingLoadWhereUniqueInput!]
  set: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadUpdateManyWithoutGroupsInput {
  connect: [WeeklyTeachingLoadWhereUniqueInput!]
  disconnect: [WeeklyTeachingLoadWhereUniqueInput!]
  set: [WeeklyTeachingLoadWhereUniqueInput!]
}

input WeeklyTeachingLoadWhereInput {
  course: CourseWhereUniqueInput
  group: GroupWhereUniqueInput
  hoursRequired: IntFilter
  id: IntFilter
  teachingType: StringFilter
  week: AcademicWeekWhereUniqueInput
}

input WeeklyTeachingLoadWhereUniqueInput {
  id: Float!
}
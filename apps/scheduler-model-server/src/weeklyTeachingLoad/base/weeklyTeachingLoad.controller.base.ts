/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WeeklyTeachingLoadService } from "../weeklyTeachingLoad.service";
import { WeeklyTeachingLoadCreateInput } from "./WeeklyTeachingLoadCreateInput";
import { WeeklyTeachingLoad } from "./WeeklyTeachingLoad";
import { WeeklyTeachingLoadFindManyArgs } from "./WeeklyTeachingLoadFindManyArgs";
import { WeeklyTeachingLoadWhereUniqueInput } from "./WeeklyTeachingLoadWhereUniqueInput";
import { WeeklyTeachingLoadUpdateInput } from "./WeeklyTeachingLoadUpdateInput";

export class WeeklyTeachingLoadControllerBase {
  constructor(protected readonly service: WeeklyTeachingLoadService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WeeklyTeachingLoad })
  async createWeeklyTeachingLoad(
    @common.Body() data: WeeklyTeachingLoadCreateInput
  ): Promise<WeeklyTeachingLoad> {
    return await this.service.createWeeklyTeachingLoad({
      data: {
        ...data,

        course: {
          connect: data.course,
        },

        group: {
          connect: data.group,
        },

        week: {
          connect: data.week,
        },
      },
      select: {
        course: {
          select: {
            id: true,
          },
        },

        group: {
          select: {
            id: true,
          },
        },

        hoursRequired: true,
        id: true,
        teachingType: true,

        week: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WeeklyTeachingLoad] })
  @ApiNestedQuery(WeeklyTeachingLoadFindManyArgs)
  async weeklyTeachingLoads(
    @common.Req() request: Request
  ): Promise<WeeklyTeachingLoad[]> {
    const args = plainToClass(WeeklyTeachingLoadFindManyArgs, request.query);
    return this.service.weeklyTeachingLoads({
      ...args,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        group: {
          select: {
            id: true,
          },
        },

        hoursRequired: true,
        id: true,
        teachingType: true,

        week: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WeeklyTeachingLoad })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async weeklyTeachingLoad(
    @common.Param() params: WeeklyTeachingLoadWhereUniqueInput
  ): Promise<WeeklyTeachingLoad | null> {
    const result = await this.service.weeklyTeachingLoad({
      where: params,
      select: {
        course: {
          select: {
            id: true,
          },
        },

        group: {
          select: {
            id: true,
          },
        },

        hoursRequired: true,
        id: true,
        teachingType: true,

        week: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WeeklyTeachingLoad })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWeeklyTeachingLoad(
    @common.Param() params: WeeklyTeachingLoadWhereUniqueInput,
    @common.Body() data: WeeklyTeachingLoadUpdateInput
  ): Promise<WeeklyTeachingLoad | null> {
    try {
      return await this.service.updateWeeklyTeachingLoad({
        where: params,
        data: {
          ...data,

          course: {
            connect: data.course,
          },

          group: {
            connect: data.group,
          },

          week: {
            connect: data.week,
          },
        },
        select: {
          course: {
            select: {
              id: true,
            },
          },

          group: {
            select: {
              id: true,
            },
          },

          hoursRequired: true,
          id: true,
          teachingType: true,

          week: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WeeklyTeachingLoad })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWeeklyTeachingLoad(
    @common.Param() params: WeeklyTeachingLoadWhereUniqueInput
  ): Promise<WeeklyTeachingLoad | null> {
    try {
      return await this.service.deleteWeeklyTeachingLoad({
        where: params,
        select: {
          course: {
            select: {
              id: true,
            },
          },

          group: {
            select: {
              id: true,
            },
          },

          hoursRequired: true,
          id: true,
          teachingType: true,

          week: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

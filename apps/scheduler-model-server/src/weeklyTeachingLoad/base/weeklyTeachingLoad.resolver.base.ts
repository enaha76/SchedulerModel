/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WeeklyTeachingLoad } from "./WeeklyTeachingLoad";
import { WeeklyTeachingLoadCountArgs } from "./WeeklyTeachingLoadCountArgs";
import { WeeklyTeachingLoadFindManyArgs } from "./WeeklyTeachingLoadFindManyArgs";
import { WeeklyTeachingLoadFindUniqueArgs } from "./WeeklyTeachingLoadFindUniqueArgs";
import { CreateWeeklyTeachingLoadArgs } from "./CreateWeeklyTeachingLoadArgs";
import { UpdateWeeklyTeachingLoadArgs } from "./UpdateWeeklyTeachingLoadArgs";
import { DeleteWeeklyTeachingLoadArgs } from "./DeleteWeeklyTeachingLoadArgs";
import { Course } from "../../course/base/Course";
import { Group } from "../../group/base/Group";
import { AcademicWeek } from "../../academicWeek/base/AcademicWeek";
import { WeeklyTeachingLoadService } from "../weeklyTeachingLoad.service";
@graphql.Resolver(() => WeeklyTeachingLoad)
export class WeeklyTeachingLoadResolverBase {
  constructor(protected readonly service: WeeklyTeachingLoadService) {}

  async _weeklyTeachingLoadsMeta(
    @graphql.Args() args: WeeklyTeachingLoadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WeeklyTeachingLoad])
  async weeklyTeachingLoads(
    @graphql.Args() args: WeeklyTeachingLoadFindManyArgs
  ): Promise<WeeklyTeachingLoad[]> {
    return this.service.weeklyTeachingLoads(args);
  }

  @graphql.Query(() => WeeklyTeachingLoad, { nullable: true })
  async weeklyTeachingLoad(
    @graphql.Args() args: WeeklyTeachingLoadFindUniqueArgs
  ): Promise<WeeklyTeachingLoad | null> {
    const result = await this.service.weeklyTeachingLoad(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WeeklyTeachingLoad)
  async createWeeklyTeachingLoad(
    @graphql.Args() args: CreateWeeklyTeachingLoadArgs
  ): Promise<WeeklyTeachingLoad> {
    return await this.service.createWeeklyTeachingLoad({
      ...args,
      data: {
        ...args.data,

        course: {
          connect: args.data.course,
        },

        group: {
          connect: args.data.group,
        },

        week: {
          connect: args.data.week,
        },
      },
    });
  }

  @graphql.Mutation(() => WeeklyTeachingLoad)
  async updateWeeklyTeachingLoad(
    @graphql.Args() args: UpdateWeeklyTeachingLoadArgs
  ): Promise<WeeklyTeachingLoad | null> {
    try {
      return await this.service.updateWeeklyTeachingLoad({
        ...args,
        data: {
          ...args.data,

          course: {
            connect: args.data.course,
          },

          group: {
            connect: args.data.group,
          },

          week: {
            connect: args.data.week,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeeklyTeachingLoad)
  async deleteWeeklyTeachingLoad(
    @graphql.Args() args: DeleteWeeklyTeachingLoadArgs
  ): Promise<WeeklyTeachingLoad | null> {
    try {
      return await this.service.deleteWeeklyTeachingLoad(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  async getCourse(
    @graphql.Parent() parent: WeeklyTeachingLoad
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  async getGroup(
    @graphql.Parent() parent: WeeklyTeachingLoad
  ): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => AcademicWeek, {
    nullable: true,
    name: "week",
  })
  async getWeek(
    @graphql.Parent() parent: WeeklyTeachingLoad
  ): Promise<AcademicWeek | null> {
    const result = await this.service.getWeek(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WeeklyProfessorAvailability } from "./WeeklyProfessorAvailability";
import { WeeklyProfessorAvailabilityCountArgs } from "./WeeklyProfessorAvailabilityCountArgs";
import { WeeklyProfessorAvailabilityFindManyArgs } from "./WeeklyProfessorAvailabilityFindManyArgs";
import { WeeklyProfessorAvailabilityFindUniqueArgs } from "./WeeklyProfessorAvailabilityFindUniqueArgs";
import { CreateWeeklyProfessorAvailabilityArgs } from "./CreateWeeklyProfessorAvailabilityArgs";
import { UpdateWeeklyProfessorAvailabilityArgs } from "./UpdateWeeklyProfessorAvailabilityArgs";
import { DeleteWeeklyProfessorAvailabilityArgs } from "./DeleteWeeklyProfessorAvailabilityArgs";
import { Professor } from "../../professor/base/Professor";
import { TimeSlot } from "../../timeSlot/base/TimeSlot";
import { AcademicWeek } from "../../academicWeek/base/AcademicWeek";
import { WeeklyProfessorAvailabilityService } from "../weeklyProfessorAvailability.service";
@graphql.Resolver(() => WeeklyProfessorAvailability)
export class WeeklyProfessorAvailabilityResolverBase {
  constructor(protected readonly service: WeeklyProfessorAvailabilityService) {}

  async _weeklyProfessorAvailabilitiesMeta(
    @graphql.Args() args: WeeklyProfessorAvailabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WeeklyProfessorAvailability])
  async weeklyProfessorAvailabilities(
    @graphql.Args() args: WeeklyProfessorAvailabilityFindManyArgs
  ): Promise<WeeklyProfessorAvailability[]> {
    return this.service.weeklyProfessorAvailabilities(args);
  }

  @graphql.Query(() => WeeklyProfessorAvailability, { nullable: true })
  async weeklyProfessorAvailability(
    @graphql.Args() args: WeeklyProfessorAvailabilityFindUniqueArgs
  ): Promise<WeeklyProfessorAvailability | null> {
    const result = await this.service.weeklyProfessorAvailability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WeeklyProfessorAvailability)
  async createWeeklyProfessorAvailability(
    @graphql.Args() args: CreateWeeklyProfessorAvailabilityArgs
  ): Promise<WeeklyProfessorAvailability> {
    return await this.service.createWeeklyProfessorAvailability({
      ...args,
      data: {
        ...args.data,

        professor: {
          connect: args.data.professor,
        },

        timeSlot: {
          connect: args.data.timeSlot,
        },

        week: {
          connect: args.data.week,
        },
      },
    });
  }

  @graphql.Mutation(() => WeeklyProfessorAvailability)
  async updateWeeklyProfessorAvailability(
    @graphql.Args() args: UpdateWeeklyProfessorAvailabilityArgs
  ): Promise<WeeklyProfessorAvailability | null> {
    try {
      return await this.service.updateWeeklyProfessorAvailability({
        ...args,
        data: {
          ...args.data,

          professor: {
            connect: args.data.professor,
          },

          timeSlot: {
            connect: args.data.timeSlot,
          },

          week: {
            connect: args.data.week,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WeeklyProfessorAvailability)
  async deleteWeeklyProfessorAvailability(
    @graphql.Args() args: DeleteWeeklyProfessorAvailabilityArgs
  ): Promise<WeeklyProfessorAvailability | null> {
    try {
      return await this.service.deleteWeeklyProfessorAvailability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Professor, {
    nullable: true,
    name: "professor",
  })
  async getProfessor(
    @graphql.Parent() parent: WeeklyProfessorAvailability
  ): Promise<Professor | null> {
    const result = await this.service.getProfessor(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => TimeSlot, {
    nullable: true,
    name: "timeSlot",
  })
  async getTimeSlot(
    @graphql.Parent() parent: WeeklyProfessorAvailability
  ): Promise<TimeSlot | null> {
    const result = await this.service.getTimeSlot(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => AcademicWeek, {
    nullable: true,
    name: "week",
  })
  async getWeek(
    @graphql.Parent() parent: WeeklyProfessorAvailability
  ): Promise<AcademicWeek | null> {
    const result = await this.service.getWeek(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WeeklyProfessorAvailabilityService } from "../weeklyProfessorAvailability.service";
import { WeeklyProfessorAvailabilityCreateInput } from "./WeeklyProfessorAvailabilityCreateInput";
import { WeeklyProfessorAvailability } from "./WeeklyProfessorAvailability";
import { WeeklyProfessorAvailabilityFindManyArgs } from "./WeeklyProfessorAvailabilityFindManyArgs";
import { WeeklyProfessorAvailabilityWhereUniqueInput } from "./WeeklyProfessorAvailabilityWhereUniqueInput";
import { WeeklyProfessorAvailabilityUpdateInput } from "./WeeklyProfessorAvailabilityUpdateInput";

export class WeeklyProfessorAvailabilityControllerBase {
  constructor(protected readonly service: WeeklyProfessorAvailabilityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WeeklyProfessorAvailability })
  async createWeeklyProfessorAvailability(
    @common.Body() data: WeeklyProfessorAvailabilityCreateInput
  ): Promise<WeeklyProfessorAvailability> {
    return await this.service.createWeeklyProfessorAvailability({
      data: {
        ...data,

        professor: {
          connect: data.professor,
        },

        timeSlot: {
          connect: data.timeSlot,
        },

        week: {
          connect: data.week,
        },
      },
      select: {
        id: true,
        isAvailable: true,

        professor: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        week: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WeeklyProfessorAvailability] })
  @ApiNestedQuery(WeeklyProfessorAvailabilityFindManyArgs)
  async weeklyProfessorAvailabilities(
    @common.Req() request: Request
  ): Promise<WeeklyProfessorAvailability[]> {
    const args = plainToClass(
      WeeklyProfessorAvailabilityFindManyArgs,
      request.query
    );
    return this.service.weeklyProfessorAvailabilities({
      ...args,
      select: {
        id: true,
        isAvailable: true,

        professor: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        week: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WeeklyProfessorAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async weeklyProfessorAvailability(
    @common.Param() params: WeeklyProfessorAvailabilityWhereUniqueInput
  ): Promise<WeeklyProfessorAvailability | null> {
    const result = await this.service.weeklyProfessorAvailability({
      where: params,
      select: {
        id: true,
        isAvailable: true,

        professor: {
          select: {
            id: true,
          },
        },

        timeSlot: {
          select: {
            id: true,
          },
        },

        week: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WeeklyProfessorAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWeeklyProfessorAvailability(
    @common.Param() params: WeeklyProfessorAvailabilityWhereUniqueInput,
    @common.Body() data: WeeklyProfessorAvailabilityUpdateInput
  ): Promise<WeeklyProfessorAvailability | null> {
    try {
      return await this.service.updateWeeklyProfessorAvailability({
        where: params,
        data: {
          ...data,

          professor: {
            connect: data.professor,
          },

          timeSlot: {
            connect: data.timeSlot,
          },

          week: {
            connect: data.week,
          },
        },
        select: {
          id: true,
          isAvailable: true,

          professor: {
            select: {
              id: true,
            },
          },

          timeSlot: {
            select: {
              id: true,
            },
          },

          week: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WeeklyProfessorAvailability })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWeeklyProfessorAvailability(
    @common.Param() params: WeeklyProfessorAvailabilityWhereUniqueInput
  ): Promise<WeeklyProfessorAvailability | null> {
    try {
      return await this.service.deleteWeeklyProfessorAvailability({
        where: params,
        select: {
          id: true,
          isAvailable: true,

          professor: {
            select: {
              id: true,
            },
          },

          timeSlot: {
            select: {
              id: true,
            },
          },

          week: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
